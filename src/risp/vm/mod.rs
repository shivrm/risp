//! This module evaluates ASTs generated by the parser. The main
//! struct is the [`Interpreter`], which evaluates the AST nodes.
//! The [`types`] module contains the different types that values
//! can have.
//! 
//! Evaluating an abstract syntax tree may produce a [`RuntimeError`]


mod interpreter;
mod types;

use std::fmt;

pub use interpreter::Interpreter;
pub use types::Value;


/// An enum used to discriminate between different kinds of errors.
#[derive(Debug)]
pub enum ErrorKind {
    /// Thrown when a name is referenced but it does not exist in the
    /// interpreter's symbol table.
    NameError,
    /// Thrown when a value is of the wrong type.
    TypeError,
    /// Thrown when a value supplied to a function is invalid.
    ValueError,
}

/// A struct that repesents an error produced while running the code
pub struct RuntimeError {
    pub kind: ErrorKind,
    pub msg: String,
}

impl fmt::Debug for RuntimeError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{:?}: {}", self.kind, self.msg)
    }
}
